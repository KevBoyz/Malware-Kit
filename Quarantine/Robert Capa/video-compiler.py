# To execute as python file: pip install pillow python-opencv tqdm
# If work a video with the images as frames going to be generated
# In this file you can edit de video config changing vars values
import os
import cv2
from PIL import Image
from tqdm import tqdm

os.chdir("Images_Output")
path = os.path.join(os.getcwd())
mean_height = 0
mean_width = 0

num_of_images = len(os.listdir('.'))
for file in os.listdir('.'):
    im = Image.open(os.path.join(path, file))
    width, height = im.size
    mean_width += width
    mean_height += height
mean_width = int(mean_width / num_of_images)
mean_height = int(mean_height / num_of_images)
pbar = tqdm(total=len(os.listdir('.') * 2))
pbar.set_description('Processing images')
for file in os.listdir('.'):
    pbar.update(1)
    if file.endswith(".jpg") or file.endswith(".jpeg") or file.endswith("png"):
        im = Image.open(os.path.join(path, file))
        width, height = im.size
        imResize = im.resize((mean_width, mean_height), Image.ANTIALIAS)
        imResize.save(file, 'JPEG', quality=95)  # setting quality


def generate_video():
    image_folder = 'Images_Output'
    video_name = 'video.avi'
    os.chdir('..')
    images_list = [img for img in os.listdir(image_folder)
              if img.endswith(".jpg") or
              img.endswith(".jpeg") or
              img.endswith("png")]
    intnumbs = list()
    for file in images_list:
        intnumbs.append(file[:file.find('.')])
        intnumbs.sort(key=int)
    images = list()
    for i in intnumbs:
        images.append(i + '.png')
    frame = cv2.imread(os.path.join(image_folder, images[0]))
    height, width, layers = frame.shape
    video = cv2.VideoWriter(video_name, 0, 5, (width, height))  # 5=fps
    for image in images:
        pbar.update(1)
        video.write(cv2.imread(os.path.join(image_folder, image)))

    cv2.destroyAllWindows()
    video.release()


generate_video()
